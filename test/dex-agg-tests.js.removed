const { expect } = require("chai");
const { ethers, waffle } = require("hardhat");
const assert = require("assert");
const {loadFixture, deployContract} = waffle;
const { ERC20_ABI, TOKENS, DEXES, FIXED_DEXES } = require("./constants");
const PredaDexQuoter = require("../artifacts/contracts/PredaDexQuoter.sol/PredaDexQuoter.json");
const PredaDexSwapper = require("../artifacts/contracts/PredaDexSwapper.sol/PredaDexSwapper.json");

describe("PredaDex Production tests", function () {
    this.timeout(200000);

    async function fixture(wallet, provider) {
        [deployer, user, ...addrs] = await ethers.getSigners();

        const predaDexQuoter = await deployContract(deployer, PredaDexQuoter);
        const predaDexSwapper = await deployContract(deployer, PredaDexSwapper);

        return {predaDexQuoter, predaDexSwapper, user};
    }

    async function fundUser(user, token, PredaDexSwapper) {
        let whaleAddress = token["whale"];

        await ethers.provider.send("hardhat_impersonateAccount", [
            whaleAddress,
        ]);
        const impersonatedAccount = await ethers.provider.getSigner(
            whaleAddress
        );

        const amount = ethers.utils.parseUnits(token["amount"], token["decimals"]);

        if(token["symbol"] == "ETH") {
        // send ethers
        await impersonatedAccount.sendTransaction({
            to: user.address,
            value: amount
        });
        } else {
        // send ERC20 tokens
        const tokenContract = await ethers.getContractAt(ERC20_ABI, token["address"]);
        await tokenContract
            .connect(impersonatedAccount)
            .transfer(user.address, amount);

        await tokenContract.connect(user).approve(PredaDexSwapper.address, amount);
        }

        await ethers.provider.send("hardhat_stopImpersonatingAccount", [
            whaleAddress,
        ]);
    }


    FIXED_DEXES.map((dex) => {
        return;
        let fromToken, toToken;

        if (dex["from"] == "dai") fromToken = TOKENS.dai;
        else if (dex["from"] == "usdt") fromToken = TOKENS.usdt;
        else if (dex["from"] == "renbtc") fromToken = TOKENS.renbtc;
        else if (dex["from"] == "hbtc") fromToken = TOKENS.hbtc;
        else console.log("missing from:", dex["from"]);

        if (dex["dest"] == "usdc") toToken = TOKENS.usdc;
        else if (dex["dest"] == "weth") toToken = TOKENS.weth;
        else if (dex["dest"] == "wbtc") toToken = TOKENS.wbtc;
        else if (dex["dest"] == "usdt") toToken = TOKENS.usdt;
        else console.log("missing dest:", dex["dest"]);

        it(('Test swapping ' + fromToken["symbol"] + ' => ' + toToken["symbol"] + ' on ' + dex["name"]), async function (){
            const {predaDexQuoter, predaDexSwapper, user} = await loadFixture(fixture);

            const swapAmount = ethers.utils.parseUnits(fromToken["amount"], fromToken["decimals"]);
            const destToken = await ethers.getContractAt(ERC20_ABI, toToken["address"]);

            // Estimate
            const res = await predaDexQuoter.connect(user).getExpectedReturn(
                fromToken["address"],
                toToken["address"],
                swapAmount,
                1,
                dex["flags"]
            );

            await fundUser(user, fromToken, predaDexSwapper);

            const balanceBefore = await destToken.balanceOf(user.address);

            const expected = res.returnAmount.mul(90).div(100);

            // console.log("Expected:", expected.toString());

            await predaDexSwapper.connect(user).swap(
                fromToken["address"],
                toToken["address"],
                swapAmount,
                expected,
                res.distribution,
                dex["flags"]
            );

            const balanceAfter = await destToken.balanceOf(user.address);
            const realReturnAmount = balanceAfter.sub(balanceBefore);

            console.log("Quoted return:", res.returnAmount.toString());
            console.log("Expected return:", expected.toString());
            console.log("Real return:", realReturnAmount.toString());

            expect(realReturnAmount.gt(expected), "Return less than 90% quoted");
        });
    });

    fromToken = TOKENS.usdc;
    toToken = TOKENS.usdt;

    DEXES.map((dex) => {
        return;
        it(('Test swapping ' + fromToken["symbol"] + ' => ' + toToken["symbol"] + ' on ' + dex["name"]), async function (){
            const {predaDexQuoter, predaDexSwapper, user} = await loadFixture(fixture);

            const swapAmount = ethers.utils.parseUnits(fromToken["amount"], fromToken["decimals"]);
            const destToken = await ethers.getContractAt(ERC20_ABI, toToken["address"]);

            // const gasRes = await predaDexQuoter.connect(user).getExpectedReturn(
            //     fromToken["address"],
            //     TOKENS.weth["address"],
            //     1,
            //     1,
            //     0
            // );

            // destTokenEthPriceTimesGasPrice = gasRes.returnAmount/* * tx.gasprice*/;

            // Estimate
            const res = await predaDexQuoter.connect(user).getExpectedReturnWithGas(
                fromToken["address"],
                toToken["address"],
                swapAmount,
                1,
                dex["flags"],
                0//destTokenEthPriceTimesGasPrice
            );


            if (res.returnAmount != 0) {
                await fundUser(user, fromToken, predaDexSwapper);

                const balanceBefore = await destToken.balanceOf(user.address);

                const expected = res.returnAmount.mul(90).div(100);

                // console.log("Expected:", expected.toString());

                await predaDexSwapper.connect(user).swap(
                    fromToken["address"],
                    toToken["address"],
                    swapAmount,
                    expected,
                    res.distribution,
                    dex["flags"]
                );

                const balanceAfter = await destToken.balanceOf(user.address);
                const realReturnAmount = balanceAfter.sub(balanceBefore);

                // console.log("Quoted return:", res.returnAmount.toString());
                // console.log("Expected return:", expected.toString());
                // console.log("Real return:", realReturnAmount.toString());

                expect(realReturnAmount.gt(expected), "Return less than 90% quoted");
            }
            // else console.log("Dex gave a 0 quote, not attempting swap");
        });
    });
});
